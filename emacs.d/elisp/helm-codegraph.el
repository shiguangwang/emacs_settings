;;; helm-codegraph.el --- Facebook Codegraph Helm interface

;;; Commentary:

;; Helm interface for codegraph. Currently only works with fbcode,
;; only tested against C++ functions and variables.

;; Codegraph: https://our.intern.facebook.com/intern/dex/codegraph/

;;
;; You'll probably want to bind helm-codegraph-do-usage-dwim and
;; helm-codegraph-do-declaratoins-dwim, which use a super-simple
;; heuristic to determine if the symbol at point is a function or
;; variable and then gather usage or declaration information from
;; codegraph.
;;
;; (global-set-key (kbd "C-c u") 'helm-codegraph-do-usage-dwim)
;; (global-set-key (kbd "C-c d") 'helm-codegraph-do-declarations-dwim)

;;; Code:

(require 'helm)
(require 'thingatpt)
(require 'json)

(defvar helm-codegraph-fbcode-root
  (concat (file-name-as-directory (getenv "HOME")) "fbcode")
  "Base fbcode directory.")

(defalias 'helm-codegraph-xform-usage-candidates
  (apply-partially #'helm-codegraph-xform-candidates "source"))

(defalias 'helm-codegraph-xform-declaration-candidates
  (apply-partially #'helm-codegraph-xform-candidates "entity"))

(defun helm-codegraph-goto-file-pos (action)
  "Go to file and poosition described by ACTION."
  (find-file
   (concat
    (file-name-as-directory helm-codegraph-fbcode-root)
    (cdr (assoc 'file action))))
  (goto-char (point-min))
  (forward-line (1- (string-to-number (cdr (assoc 'line action)))))
  (forward-line (cdr (assoc 'column action))))

(defun helm-codegraph-compare-targets (a b)
  "Sort two targets generated by helm-codegraph-xform-candidates.
A B targets generated by helm-codegraph-xform-candidates"
  (or
   (string-lessp (cdr (assoc 'file a)) (cdr (assoc 'file b)))
   (< (string-to-number (cdr (assoc 'line a)))
      (string-to-number (cdr (assoc 'line b))))))


(defun helm-codegraph-xform-candidates (fullname-dict candidates)
  "Decode JSON usage candidate representation.
FULLNAME-DICT is the name of the JSON dict containing the fullName key.
CANDIDATES is a list of JSON strings represnting matches from codegraph.
Returns a list of display . action pairs"
  (cl-loop for candidate in candidates with result = '()
           do
           (let* ((json-object-type 'hash-table)
                  (c (json-read-from-string candidate))
                  (file (gethash "file" (gethash "location" c)))
                  (line (number-to-string
                         (gethash "line" (gethash "start" (gethash "location" c)))))
                  (column
                   (gethash "column"
                            (gethash "start"
                                     (gethash "location" c))))
                  (short-name
                   (replace-regexp-in-string "(.*)" "()"
                                             (gethash "fullName"
                                                      (gathash fullname-dict c))))
                  (display (concat short-name " in " file ":" line))
                  (target
                   `((file . ,file) (line . ,line) (column . ,column))))
             (push `(,display . ,target) result))
           finally
           return (cl-sort result 'helm-codegraph-compare-targets :key 'cdr)))

(defun helm-codegraph-function-or-variable-at-point ()
  "Guess at the function-or-variable-ness of the symbol at point."
  (let ((bounds (bounds-of-thing-at-point 'symbol)))
    (if (equal (string (char-after (cdr bounds))) "(")
        'function
      'variable)))

(defalias 'helm-codegraph-get-usage-candidates
  (apply-partially
   #'helm-codegraph-get-candidates "fcgu" #'helm-codegraph-xform-usage-candidates))

(defun helm-codegraph-get-candidates (cmd xform search-str)
  "Return list of (DISPLAY . REAL) pairs for usage of search-str.
CMD codegraph command to run (e.g. fcgu)
XFORM helm-codegraph function to transform json entry to (display . target)
SEARCH-STR search for usage of SEARCH-STR"
  (funcall xform
           (split-string
            (substring
             (shell-command-to-string
              (format "%s --mode json '%s'" cmd search-str))
             0 -1)
            "\n")))

(defun helm-codegraph-usage (search-str)
  "Helm source for usage.
SEARCH-STR is the search string to pass to codegraph."
  (let ((codegraph-usage-source
         (helm-build-sync-source "codegraph-usage"
           :action #'helm-codegraph-goto-file-pos
           :candidates
           (lambda () (helm-codegraph-get-usage-candidates search-str)))))
    (helm :sources 'codegraph-usage-source)))

(defun helm-codegraph-do-usage-variable ()
  "Find usage for a variable."
  (interactive)
  (helm-codegraph-usage (format "**::%s" (symbol-at-point))))

(defun helm-codegraph-do-usage-function ()
  "Find usage for a function."
  (interactive)
  (helm-codegraph-usage (format "**::%s(*" (symbol-at-point))))


(defun helm-codegraph-do-usage-dwim ()
  "Find usage for a variable or function."
  (interactive)
  (let ((search-str
         (if (equal (helm-codegraph-function-or-variable-at-point) 'function)
             (format "**::%s(*" (symbol-at-point))
           (format "**::%s" (symbol-at-point)))))
    (helm-codegraph-usage search str)))

(defalias 'helm-codegraph-get-declaration-candidates
  (apply-partially
   #'helm-codegraph-get-candidates "fcgp"
   #'helm-codegraph-xform-declaration-candidates))


(defun helm-codegraph-declarations (search-str)
  "Helmsource for declarations.
SEARCH-STR is the search string to pass to codegraph."
  (let ((codegraph-declarations-source
         (helm-build-sync-source "codegraph-declarations"
           :action #'helm-codegraph-goto-file-pos
           :candidates
           (lambda () (helm-codegraph-get-declaration-candidates search-str)))))
    (helm :sources 'codegraph-declarations-source)))

(defun helm-codegraph-do-declarations-function ()
  "Find function declarations."
  (interactive)
  (helm-codegraph-declarations (format "**::%s(*" (symbol-at-point))))

(defun helm-codegraph-do-declarations-variable ()
  "Find variable declarations."
  (interactive)
  (helm-codegraph-declarations (format "**::%s" (symbol-at-point))))

(defun helm-codegraph-do-declarations-dwim ()
  "Find declarations for variable or function."
  (interactive)
  (let ((search-str
         (if (equal (helm-codegraph-function-or-variable-at-point) 'function)
             (format "**::%s(*" (symbol-at-point))
           (format "**::%s" (symbol-at-point)))))
    (helm-codegraph-declarations search-str)))

(provide 'helm-codegraph)

;;; helm-codegraph.el ends here
